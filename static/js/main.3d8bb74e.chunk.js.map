{"version":3,"sources":["components/Board.js","components/Card.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Board","children","className","Card","imageUrl","id","flipped","handleSelectCard","founded","pairID","onClick","src","alt","Form","setCards","setIsGameStarted","setTurn","players","useState","imagesURLs","setImagesURLs","onSubmit","e","preventDefault","images","document","querySelector","files","length","alert","image","url","URL","createObjectURL","push","withPairID","map","uuid","card","index","array","cardsLength","pair","Math","floor","random","pickUserRandomly","htmlFor","onChange","console","log","target","type","name","multiple","imageURL","users","foundedCards","App","turn","setPlayers","cards","isGameStarted","getFlippedCards","updatedCards","filter","useEffect","flippedCards","timer","setTimeout","cardsFoundedIds","prevCards","includes","updatedPlayers","player","handleTurnCardsDown","userID","nextUser","find","user","handleChangeTurn","clearTimeout","cardProps","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"iSAWeA,EARD,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACb,OACI,qBAAKC,UAAU,QAAf,SACKD,KCiBEE,G,MAnBF,SAAC,GAAkE,IAAhEC,EAA+D,EAA/DA,SAAUC,EAAqD,EAArDA,GAAIC,EAAiD,EAAjDA,QAASC,EAAwC,EAAxCA,iBAA0BC,GAAc,EAAtBC,OAAsB,EAAdD,SAC7D,OACI,sBAAKE,QAAS,kBAAMH,EAAiBF,IAAKH,UAAS,eAAUI,GAAWE,EAAU,UAAY,IAA9F,UACI,qBAAKN,UAAU,YACf,qBAAKS,IAAKP,EAAUQ,IAAI,U,eCqFrBC,G,MAxFF,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,SAAUC,EAAyC,EAAzCA,iBAAkBC,EAAuB,EAAvBA,QAASC,EAAc,EAAdA,QAAc,EAE3BC,mBAAS,IAFkB,mBAExDC,EAFwD,KAE5CC,EAF4C,KAoE/D,OACI,eAAC,WAAD,WACI,uBAAMC,SA/Cd,SAAsBC,GAClBA,EAAEC,iBACF,IACMC,EADQC,SAASC,cAAc,mBAChBC,MAErB,GAAsB,IAAlBH,EAAOI,OAAc,OAAOC,MAAM,uCAEtC,IAPqB,EAOjBV,EAAa,GAPI,cASDK,GATC,IASrB,2BAA4B,CAAC,IAAlBM,EAAiB,QAClBC,EAAMC,IAAIC,gBAAgBH,GAChCX,EAAWe,KAAKH,IAXC,8BAerB,IAOMI,EAPU,UAAOhB,EAAeA,GAGJiB,KAAI,SAAAL,GAAG,MAAK,CAAEA,IAAKA,EAAKvB,SAAS,EAAOH,GAAIgC,cAAQ/B,SAAS,MAI7D8B,KAAI,SAACE,EAAMC,EAAOC,GAChD,IAAMC,EAActB,EAAWS,OAC/B,GAAIW,EAAQE,EAAc,EAAG,CACzB,IAAMC,EAAOF,EAAMD,EAAQE,GAC3BH,EAAK7B,OAASiC,EAAKrC,OAChB,CACH,IAAMqC,EAAOF,EAAMD,EAAQE,GAC3BH,EAAK7B,OAASiC,EAAKrC,GAEvB,OAAOiC,KASXxB,EAASqB,GACTpB,GAAiB,GACjBC,EA9CJ,SAA0BC,GACtB,OAAOA,EAAQ0B,KAAKC,MAAMD,KAAKE,SAAW5B,EAAQW,SA6C1CkB,CAAiB7B,KAKrB,UACI,uBAAO8B,QAAQ,iBAAf,sDACA,uBAAOC,SApEnB,SAA2B1B,GACvB2B,QAAQC,IAAI,qBACZ,IAF0B,EAGpB1B,EADQF,EAAE6B,OACKxB,MAEjBR,EAAa,GALS,cAONK,GAPM,IAO1B,2BAA4B,CAAC,IAAlBM,EAAiB,QAClBC,EAAMC,IAAIC,gBAAgBH,GAChCX,EAAWe,KAAKH,IATM,8BAY1BX,EAAcD,IAwD8BiC,KAAK,OAAOC,KAAK,GAAGhD,GAAG,iBAAiBiD,UAAQ,IACpF,qBAAKpD,UAAU,UAAf,SACI,wBAAQkD,KAAK,SAAb,0BAGR,mGACA,6DAA6BjC,EAAWS,UACxC,qBAAK1B,UAAU,iBAAf,SACKiB,EAAWiB,KAAI,SAAAmB,GAAQ,OAAI,qBAAoB5C,IAAK4C,GAAfA,aC1EhDC,EAAQ,CACZ,CACEH,KAAM,SACNhD,GAAIgC,cACJoB,aAAc,IAEhB,CACEJ,KAAM,UACNhD,GAAIgC,cACJoB,aAAc,KA4IHC,MAvIf,WAAgB,IAAD,EAEWxC,qBAFX,mBAENyC,EAFM,KAEA3C,EAFA,OAGiBE,mBAASsC,GAH1B,mBAGNvC,EAHM,KAGG2C,EAHH,OAIa1C,mBAAS,IAJtB,mBAIN2C,EAJM,KAIC/C,EAJD,OAK6BI,oBAAS,GALtC,mBAKN4C,EALM,KAKS/C,EALT,KAgFb,SAASR,EAAiBF,GAExB,GADqB0D,IACJnC,QAAU,EACzBC,MAAM,4DADR,CAKA,IAAMmC,EAAY,YAAOH,GACzBG,EAAa5B,KAAI,SAAAE,GAIf,OAHIA,EAAKjC,KAAOA,IACdiC,EAAKhC,SAAU,GAEVgC,KAETxB,EAASkD,IAGX,SAASD,IAEP,OAAOF,EAAMI,QAAO,SAAA3B,GAAI,OAAqB,IAAjBA,EAAKhC,UAAqC,IAAjBgC,EAAK9B,WAG5D,OA/FA0D,qBAAU,WACRjB,QAAQC,IAAI,yBAA0BY,KACrC,CAACA,IAEJI,qBAAU,WACR,GAAIJ,EAAe,CAEjB,IAAMK,EAAeJ,IAErB,GAA4B,IAAxBI,EAAavC,OAAc,CAC7B,IAAIpB,GAAU,EAEV2D,EAAa,GAAG1D,SAAW0D,EAAa,GAAG9D,KAE7CG,GAAU,GAGZ,IAAM4D,EAAQC,YAAW,WACvBpB,QAAQC,IAAI,wCAyBpB,YAAsE,IAAD,IAAtC1C,eAAsC,aAArB2D,oBAAqB,MAAN,GAAM,EAE7DG,EAAkBH,EAAa/B,KAAI,SAAAE,GAAI,OAAIA,EAAKjC,MAetD,GAZAS,GAAS,SAAAyD,GACP,OAAOA,EAAUnC,KAAI,SAAAE,GAMnB,OALI9B,GAAW8D,EAAgBE,SAASlC,EAAKjC,IAC3CiC,EAAK9B,SAAU,EAEf8B,EAAKhC,SAAU,EAEVgC,QAKP9B,EAAS,CACX,IAAMiE,EAAc,YAAOxD,GAC3BwD,EAAerC,KAAI,SAAAsC,GAIjB,OAHIA,EAAOrE,KAAOsD,EAAKtD,KACrBqE,EAAOjB,aAAP,sBAA0BiB,EAAOjB,cAAjC,YAAkDU,KAE7CO,KAETd,EAAWa,IAjDPE,CAAoB,CAAEnE,UAAS2D,aAAcA,IAarD,WAEE,IAAMS,EAASjB,EAAKtD,GAIdwE,EAAW5D,EAAQ6D,MAAK,SAAAC,GAAI,OAAIA,EAAK1E,KAAOuE,KAElD5D,EAAQ6D,GApBFG,KACC,KAGH,OAAO,WACLC,aAAab,QAIlB,CAACP,IAmEF,sBAAK3D,UAAU,MAAf,UACE,6CAEC4D,EAEG,eAAC,WAAD,WACGH,GAAQ,2CAAcA,EAAKN,QAE5B,cAAC,EAAD,UAEIQ,EAAMzB,KAAI,YAA4C,IAAzC/B,EAAwC,EAAxCA,GACL6E,EAAY,CAChB7E,KACAD,SAHiD,EAApC2B,IAIbzB,QAJiD,EAA/BA,QAKlBC,mBACAE,OANiD,EAAtBA,OAO3BD,QAPiD,EAAdA,SASrC,OAAO,cAAC,EAAD,eAAmB0E,GAAR7E,WAMzB,cAAC,EAAD,CAAMS,SAAUA,EAAUG,QAASA,EAASD,QAASA,EAASD,iBAAkBA,QC7I5EoE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFrE,SAASsE,eAAe,SAM1BZ,M","file":"static/js/main.3d8bb74e.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"../styles/board.css\";\r\n\r\nconst Board = ({ children }) => {\r\n    return (\r\n        <div className=\"board\">\r\n            {children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Board\r\n","import React from 'react'\r\nimport \"../styles/card.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Card = ({ imageUrl, id, flipped, handleSelectCard, pairID, founded }) => {\r\n    return (\r\n        <div onClick={() => handleSelectCard(id)} className={`card ${flipped || founded ? \"flipped\" : \"\"}`}>\r\n            <div className=\"overlay\"></div>\r\n            <img src={imageUrl} alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nCard.propTypes = {\r\n    imageUrl: PropTypes.string.isRequired,\r\n    flipped: PropTypes.bool.isRequired,\r\n    id: PropTypes.string.isRequired,\r\n    handleSelectCard: PropTypes.func.isRequired,\r\n    pairID: PropTypes.string.isRequired,\r\n    founded: PropTypes.bool.isRequired\r\n}\r\n\r\n\r\nexport default Card\r\n","import React, { Fragment, useState } from 'react'\r\nimport { v4 as uuid } from \"uuid\";\r\n\r\nimport \"../styles/form.css\";\r\n\r\nconst Form = ({ setCards, setIsGameStarted, setTurn, players }) => {\r\n\r\n    const [imagesURLs, setImagesURLs] = useState([]);\r\n\r\n    function handleOnImageLoad(e) {\r\n        console.log(\"Input has changed\");\r\n        const input = e.target;\r\n        const images = input.files;\r\n\r\n        let imagesURLs = [];\r\n        //create an url for each image in the input element\r\n        for (const image of images) {\r\n            const url = URL.createObjectURL(image);\r\n            imagesURLs.push(url);\r\n        };\r\n\r\n        setImagesURLs(imagesURLs)\r\n    }\r\n\r\n    function pickUserRandomly(players) {\r\n        return players[Math.floor(Math.random() * players.length)];\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        const input = document.querySelector(\"#memoryGameImgs\");\r\n        const images = input.files;\r\n\r\n        if (images.length === 0) return alert(\"Ninguna imagen ha sido seleccionada\");\r\n\r\n        let imagesURLs = [];\r\n        //create an url for each image in the input element\r\n        for (const image of images) {\r\n            const url = URL.createObjectURL(image);\r\n            imagesURLs.push(url);\r\n        };\r\n\r\n        //Duplicate the images from array to have a pair of each image.\r\n        const duplicates = [...imagesURLs, ...imagesURLs];\r\n\r\n        //Turn every entry into an object with the properties needed \r\n        const normalizedData = duplicates.map(url => ({ url: url, founded: false, id: uuid(), flipped: false }));\r\n\r\n\r\n        //Find the pair of each image\r\n        const withPairID = normalizedData.map((card, index, array) => {\r\n            const cardsLength = imagesURLs.length;\r\n            if (index > cardsLength - 1) {\r\n                const pair = array[index - cardsLength];\r\n                card.pairID = pair.id;\r\n            } else {\r\n                const pair = array[index + cardsLength];\r\n                card.pairID = pair.id;\r\n            }\r\n            return card;\r\n        })\r\n\r\n        //Shuffle the order of every object in the array \r\n        // to randomize the position of each image on the board \r\n        //Still Missing\r\n        //\r\n\r\n        //set the cards\r\n        setCards(withPairID);\r\n        setIsGameStarted(true);\r\n        setTurn(pickUserRandomly(players))\r\n\r\n    }\r\n    return (\r\n        <Fragment>\r\n            <form onSubmit={handleSubmit}>\r\n                <label htmlFor=\"memoryGameImgs\">Elige las imágenes desde tu ordenador</label>\r\n                <input onChange={handleOnImageLoad} type=\"file\" name=\"\" id=\"memoryGameImgs\" multiple />\r\n                <div className=\"buttons\">\r\n                    <button type=\"submit\">Aceptar</button>\r\n                </div>\r\n            </form>\r\n            <h3>Para iniciar el juego carga tus imágenes y da click en aceptar</h3>\r\n            <h4>Imágenes seleccionadas: {imagesURLs.length}</h4>\r\n            <div className=\"images-display\">\r\n                {imagesURLs.map(imageURL => <img key={imageURL} src={imageURL} />)}\r\n            </div>\r\n        </Fragment>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import { Fragment, useEffect, useState } from 'react';\nimport './App.css';\nimport Board from \"./components/Board\";\nimport Card from \"./components/Card\";\nimport Form from \"./components/Form\";\nimport { v4 as uuid } from \"uuid\";\n\n\n//Array with the url of every image for the memory game\n// const imgs = [\"https://images.unsplash.com/photo-1531846802986-4942a5c3dd08?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=634&q=80\", \"https://images.unsplash.com/photo-1561488111-5d800fd56b8a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1051&q=80\", \"https://images.unsplash.com/photo-1516844113229-18646a422956?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=1049&q=80\", \"https://images.unsplash.com/photo-1550604602-7fae1adbe912?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1055&q=80\", \"https://images.unsplash.com/photo-1598797246294-7620e33a632f?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=967&q=80\", \"https://images.unsplash.com/photo-1562595410-2cb999af24b5?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=926&q=80\"];\n\nconst users = [\n  {\n    name: \"Pepito\",\n    id: uuid(),\n    foundedCards: []\n  },\n  {\n    name: \"Juanito\",\n    id: uuid(),\n    foundedCards: []\n  },\n]\n\n\nfunction App() {\n\n  const [turn, setTurn] = useState();\n  const [players, setPlayers] = useState(users);\n  const [cards, setCards] = useState([]);\n  const [isGameStarted, setIsGameStarted] = useState(false);\n\n  useEffect(() => {\n    console.log(\"Game state changed to \", isGameStarted)\n  }, [isGameStarted])\n\n  useEffect(() => {\n    if (isGameStarted) {\n\n      const flippedCards = getFlippedCards();\n      //Check if there are two cards selected \n      if (flippedCards.length === 2) {\n        let founded = false;\n        //Show result\n        if (flippedCards[0].pairID === flippedCards[1].id)\n          //   // alert(\"Encontraste el par!\");\n          founded = true;\n\n        //Turn all the cards down after 5s\n        const timer = setTimeout(() => {\n          console.log(\"Turning cards down and changing turn\")\n          handleTurnCardsDown({ founded, flippedCards: flippedCards });\n          handleChangeTurn();\n        }, 5000);\n\n        //clean up function\n        return () => {\n          clearTimeout(timer);\n        }\n      }\n    }\n  }, [cards])\n\n\n  function handleChangeTurn() {\n    //Get the index of the current user;\n    const userID = turn.id;\n    // console.log(`Current user: `, turn);\n    //Get the other user \n    //Needs to be improved because it works only if we have two players\n    const nextUser = players.find(user => user.id !== userID);\n    // console.log(\"Next user: \", nextUser);\n    setTurn(nextUser);\n  }\n\n  function handleTurnCardsDown({ founded = false, flippedCards = [] }) {\n\n    const cardsFoundedIds = flippedCards.map(card => card.id);\n\n    //Turn down all the cards except the pairs that were founded\n    setCards(prevCards => {\n      return prevCards.map(card => {\n        if (founded && cardsFoundedIds.includes(card.id)) {\n          card.founded = true;\n        } else {\n          card.flipped = false;\n        }\n        return card;\n      });\n    });\n\n    //if the pair was founded insert the info of the cards in the player object\n    if (founded) {\n      const updatedPlayers = [...players];\n      updatedPlayers.map(player => {\n        if (player.id === turn.id) {\n          player.foundedCards = [...player.foundedCards, ...flippedCards];\n        }\n        return player;\n      })\n      setPlayers(updatedPlayers);\n    }\n\n  };\n\n  function handleSelectCard(id) {\n    const flippedCards = getFlippedCards();\n    if (flippedCards.length >= 2) {\n      alert(\"No puedes voltear más de dos tarjetas en tu turno\");\n      return;\n    }\n\n    const updatedCards = [...cards];\n    updatedCards.map(card => {\n      if (card.id === id) {\n        card.flipped = true;\n      }\n      return card\n    })\n    setCards(updatedCards);\n  }\n\n  function getFlippedCards() {\n    //return the cards that are turned up excluding the ones that are already founded\n    return cards.filter(card => card.flipped === true && card.founded === false);\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Memory Game</h1>\n\n      {isGameStarted\n        ? (\n          <Fragment>\n            {turn && <h3>Turno de {turn.name}</h3>}\n\n            <Board>\n              {\n                cards.map(({ id, url, flipped, pairID, founded }) => {\n                  const cardProps = {\n                    id,\n                    imageUrl: url,\n                    flipped,\n                    handleSelectCard,\n                    pairID,\n                    founded\n                  }\n                  return <Card key={id} {...cardProps} />\n                })\n              }\n            </Board>\n          </Fragment>\n        )\n        : (<Form setCards={setCards} players={players} setTurn={setTurn} setIsGameStarted={setIsGameStarted} />)\n      }\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}